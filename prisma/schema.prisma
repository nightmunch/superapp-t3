// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String         @default("User")
  accounts      Account[]
  sessions      Session[]
  claim         Claim[]
  Transactions  Transactions[]
  networth      NetWorth[]
}

// Money Track - Claim

model Claim {
  id     String   @id @default(cuid()) @map("_id")
  item   String
  amount Float
  date   DateTime
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Money Track - Transactions

model Transactions {
  id       String   @id @default(cuid()) @map("_id")
  item     String
  amount   Float
  category String
  remarks  String?
  date     DateTime
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Money Track - Net Worth

model NetWorth {
  id       String  @id @default(cuid()) @map("_id")
  item     String
  category String
  amount   Float
  currency String  @default("RM")
  remarks  String?
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}

// Chef Burp - Recipe

model Recipe {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String?
  ingredient  String
  step        String
  date        DateTime @default(now())
}
